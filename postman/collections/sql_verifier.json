{
	"info": {
		"_postman_id": "696c353a-00ca-4574-a3d2-88ee9d0188dc",
		"name": "sql_verifier",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "20439790-696c353a-00ca-4574-a3d2-88ee9d0188dc"
	},
	"item": [
		{
			"name": "Lesson 4.1",
			"item": [
				{
					"name": "Registration",
					"item": [
						{
							"name": "Registration a new student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"The response has a header server with value Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\"); ",
											"});",
											"",
											"const student = JSON.parse(pm.request.body.raw);",
											"",
											"pm.environment.set(\"newStudenLogin\", student.login);",
											""
										],
										"type": "text/javascript",
										"id": "06413c49-39df-454f-b233-0b1f565facc6"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "965831e4-456b-465e-bb44-3efacf561f7d"
									}
								}
							],
							"id": "fe895ac3-8181-4537-b8f5-eb3df1c1cf40",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"login\": \"{{$randomNoun}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"imageUrl\": \"string\",\n  \"activated\": true,\n  \"langKey\": \"string\",\n  \"createdBy\": \"{{admin}}\",\n  \"createdDate\": \"2023-11-16T19:34:20.909Z\",\n  \"lastModifiedBy\": \"{{admin}}\",\n  \"lastModifiedDate\": \"2023-11-16T19:34:20.909Z\",\n  \"authorities\": [\n    \"ROLE_USER_STUDENT\"\n  ],\n  \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check an authority of a new student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"The body has a ROLE_USER_STUDENT authority\", function () {",
											"    pm.expect(pm.response.json().authorities).to.eql([\"ROLE_USER_STUDENT\"]);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "0a981d00-794d-4c3a-9bef-960c7fea0add"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "0b48bad2-94d7-4e71-b0dc-eaa95bfb0d18"
									}
								}
							],
							"id": "643441ec-5941-4df1-8ec3-a4ecf4c8d7b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"login\": \"{{$randomNoun}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"imageUrl\": \"string\",\n  \"activated\": true,\n  \"langKey\": \"string\",\n  \"createdBy\": \"{{admin}}\",\n  \"createdDate\": \"2023-11-16T19:34:20.909Z\",\n  \"lastModifiedBy\": \"{{admin}}\",\n  \"lastModifiedDate\": \"2023-11-16T19:34:20.909Z\",\n  \"authorities\": [\n    \"ROLE_USER_STUDENT\"\n  ],\n  \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/users/{{newStudenLogin}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{newStudenLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration a new teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"The response has a header server with value Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\"); ",
											"});",
											"",
											"const teacher = JSON.parse(pm.request.body.raw);",
											"",
											"pm.environment.set(\"newTeacherLogin\", teacher.login);"
										],
										"type": "text/javascript",
										"id": "ec862d4f-8ba4-40a1-843e-79efaebf77c5"
									}
								}
							],
							"id": "ad4e8b96-7e05-4645-b71a-4650c9418c2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"login\": \"{{$randomNoun}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"imageUrl\": \"string\",\n  \"activated\": true,\n  \"langKey\": \"en\",\n  \"createdBy\": \"{{admin}}\",\n  \"createdDate\": \"2023-11-16T19:34:20.909Z\",\n  \"lastModifiedBy\": \"{{admin}}\",\n  \"lastModifiedDate\": \"2023-11-16T19:34:20.909Z\",\n  \"authorities\": [\n    \"ROLE_USER_TEACHER\"\n  ],\n  \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check an authority of a new teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"The body has a ROLE_USER_TEACHER authority\", function () {",
											"    pm.expect(pm.response.json().authorities).to.eql([\"ROLE_USER_TEACHER\"]);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "9ffe8a18-cc3d-4029-bea1-5187edb445bf"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "ac2d41c2-6764-4ea0-b264-ce4eb4b1f7c2"
									}
								}
							],
							"id": "3e598dc1-7e13-4c7d-83df-02ae04084200",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"login\": \"{{$randomNoun}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"imageUrl\": \"string\",\n  \"activated\": true,\n  \"langKey\": \"string\",\n  \"createdBy\": \"{{admin}}\",\n  \"createdDate\": \"2023-11-16T19:34:20.909Z\",\n  \"lastModifiedBy\": \"{{admin}}\",\n  \"lastModifiedDate\": \"2023-11-16T19:34:20.909Z\",\n  \"authorities\": [\n    \"ROLE_USER_STUDENT\"\n  ],\n  \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/users/{{newTeacherLogin}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{newTeacherLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration a new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec862d4f-8ba4-40a1-843e-79efaebf77c5",
										"exec": [
											"pm.test(\"Status code is 201 Created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"The response has a header server with value Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\"); ",
											"});",
											"",
											"const admin = JSON.parse(pm.request.body.raw);",
											"",
											"pm.environment.set(\"newAdminLogin\", admin.login);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1e6a4583-aea4-4f1d-bd53-7bbe45b16c53",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"login\": \"{{$randomNoun}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"imageUrl\": \"string\",\n  \"activated\": true,\n  \"langKey\": \"en\",\n  \"createdBy\": \"{{admin}}\",\n  \"createdDate\": \"2023-11-16T19:34:20.909Z\",\n  \"lastModifiedBy\": \"{{admin}}\",\n  \"lastModifiedDate\": \"2023-11-16T19:34:20.909Z\",\n  \"authorities\": [\n    \"ROLE_USER_ADMIN\"\n  ],\n  \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check an authority of a new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ffe8a18-cc3d-4029-bea1-5187edb445bf",
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"The body has a ROLE_USER_ADMIN authority\", function () {",
											"    pm.expect(pm.response.json().authorities).to.eql([\"ROLE_USER_ADMIN\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ac2d41c2-6764-4ea0-b264-ce4eb4b1f7c2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ffce89cd-9f01-4de6-a802-d48e02d8fbb2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"login\": \"{{$randomNoun}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"imageUrl\": \"string\",\n  \"activated\": true,\n  \"langKey\": \"string\",\n  \"createdBy\": \"{{admin}}\",\n  \"createdDate\": \"2023-11-16T19:34:20.909Z\",\n  \"lastModifiedBy\": \"{{admin}}\",\n  \"lastModifiedDate\": \"2023-11-16T19:34:20.909Z\",\n  \"authorities\": [\n    \"ROLE_USER_STUDENT\"\n  ],\n  \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/users/{{newAdminLogin}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{newAdminLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration a new user without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"The JSON has a detail key with additional info\", function () {",
											"    pm.expect(pm.response.json().detail).to.eql(\"Failed to read request\");",
											"});"
										],
										"type": "text/javascript",
										"id": "9ea4a028-3e98-4aed-b249-2436adcead75"
									}
								}
							],
							"id": "54b716a4-09b8-45dd-93ef-30defb928569",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration with empty login value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"The JSON has a title key with additional info\", function () {",
											"    pm.expect(pm.response.json().title).to.eql(\"Method argument not valid\");",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "5aa02102-a454-4ee0-a024-b3dc442e43ee"
									}
								}
							],
							"id": "237dba93-b4d8-4985-ac8d-389aa65ff6e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"login\": \"\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"imageUrl\": \"string\",\n  \"activated\": true,\n  \"langKey\": \"ru\",\n  \"createdBy\": \"{{admin}}\",\n  \"createdDate\": \"2023-11-16T19:34:20.909Z\",\n  \"lastModifiedBy\": \"{{admin}}\",\n  \"lastModifiedDate\": \"2023-11-16T19:34:20.909Z\",\n  \"authorities\": [\n    \"ROLE_USER_STUDENT\"\n  ],\n  \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration a new user with numbers in the firstname value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"The JSON has a detail key with additional info\", function () {",
											"    pm.expect(pm.response.json().detail).to.eql(\"Failed to read request\");",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "08d889f5-a3ca-45e3-b153-a9e70a870976"
									}
								}
							],
							"id": "1e2367c4-2bf5-4004-a0b2-51739a841e4c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"login\": \"{{$randomNoun}}\",\n  \"firstName\": {{$randomInt}},\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"imageUrl\": \"string\",\n  \"activated\": true,\n  \"langKey\": \"en\",\n  \"createdBy\": \"{{admin}}\",\n  \"createdDate\": \"{2023-11-16T19:34:20.909Z}\",\n  \"lastModifiedBy\": \"{{admin}}\",\n  \"lastModifiedDate\": \"2023-11-16T19:34:20.909Z\",\n  \"authorities\": [\n    \"ROLE_USER_ADMIN\"\n  ],\n  \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"id": "546266f9-62c6-473c-ad0d-bd1d10be7630"
				},
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Authentication of the student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The id token is available in the body\", function () {",
											"    pm.expect(pm.response.json()).to.have.property(\"id_token\"); ",
											"});"
										],
										"type": "text/javascript",
										"id": "d2fe37f6-505a-458f-94bd-0386fb6f6cba"
									}
								}
							],
							"id": "c3e9fa18-1bfe-4abe-8104-cd5031b086de",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"username\": \"{{studentUserName}}\",\n\"password\": \"{{studentPassword}}\",\n\"rememberMe\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authentication of the teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The id token is available in the body\", function () {",
											"    pm.expect(pm.response.json()).to.have.property(\"id_token\"); ",
											"});"
										],
										"type": "text/javascript",
										"id": "d389a3ea-b625-4487-ac94-14e09397d000"
									}
								}
							],
							"id": "91208b96-05c4-4050-8ec1-6e5e48687e43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"username\": \"{{teacherUserName}}\",\n\"password\": \"{{teacherPassword}}\",\n\"rememberMe\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authentication of the admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The id token is available in the body\", function () {",
											"    pm.expect(pm.response.json()).to.have.property(\"id_token\"); ",
											"});"
										],
										"type": "text/javascript",
										"id": "261ff6a5-42b6-40be-8448-b49af2073a97"
									}
								}
							],
							"id": "c84f19c1-4142-4e27-93c9-7d29430eeeeb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"username\": \"{{adminUserName}}\",\n\"password\": \"{{adminPassword}}\",\n\"rememberMe\": true\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authentication with invalid username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 Unathorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"The JSON has a detail key with additional info\", function () {",
											"    pm.expect(pm.response.json().detail).to.eql(\"Bad credentials\");",
											"});"
										],
										"type": "text/javascript",
										"id": "9226bcd5-c0be-41d2-b4d3-4f751ab82d26"
									}
								}
							],
							"id": "afcb3196-53d1-435d-ae9d-293fcf3aaf7a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"username\": \"123\",\n\"password\": \"{{studentPassword}}\",\n\"rememberMe\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authentication  with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"The JSON has a title key with additional info\", function () {",
											"    pm.expect(pm.response.json().title).to.eql(\"Method argument not valid\");",
											"});"
										],
										"type": "text/javascript",
										"id": "81f25756-a520-486e-b5a7-94427467c306"
									}
								}
							],
							"id": "d31b992d-6444-43f0-ac58-c110dc2f92b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"username\": \"{{teacherUserName}}\",\n\"password\": \"\",\n\"rememberMe\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration a new non-activated user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"The response has a header server with value Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\"); ",
											"});",
											"",
											"const nonActiveUser = JSON.parse(pm.request.body.raw);",
											"",
											"pm.environment.set(\"nonActiveUserName\", nonActiveUser.login);",
											""
										],
										"type": "text/javascript",
										"id": "baf1af57-c6c8-4d35-82d4-6235ee58a113"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "b171a9f8-8fdb-49e6-951b-5aac69272eef"
									}
								}
							],
							"id": "2540e789-8ae6-4ae0-9685-e5591fde7fe1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 1,\n  \"login\": \"{{$randomNoun}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"imageUrl\": \"string\",\n  \"activated\": true,\n  \"langKey\": \"string\",\n  \"createdBy\": \"{{admin}}\",\n  \"createdDate\": \"2023-11-16T19:34:20.909Z\",\n  \"lastModifiedBy\": \"{{admin}}\",\n  \"lastModifiedDate\": \"2023-11-16T19:34:20.909Z\",\n  \"authorities\": [\n    \"ROLE_USER_STUDENT\"\n  ],\n  \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authentication with non-activated user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500 Internal Server Error\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"const user = JSON.parse(pm.request.body.raw);",
											"",
											"console.log(user.username)",
											"",
											"pm.test(\"The JSON has a detail key with username value\", function () {",
											"    pm.expect(pm.response.json().detail).to.eql(`User ${user.username} was not activated`);",
											"});"
										],
										"type": "text/javascript",
										"id": "87340936-bc31-4ce9-9b56-32fc1ea7dc13"
									}
								}
							],
							"id": "701510d5-6997-4639-995a-1b176e52742c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"username\": \"{{nonActiveUserName}}\",\n\"password\": \"{{nonActivePassword}}\",\n\"rememberMe\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					],
					"id": "f0fcf32c-103f-417e-85e6-1faf09a568bb"
				}
			],
			"id": "05fc28c5-a1d1-4a62-90bb-a2fc48c15439"
		},
		{
			"name": "Lesson 4.2.1",
			"item": [
				{
					"name": "Tasks",
					"item": [
						{
							"name": "Get a lisf of tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const task = pm.response.json()",
											"",
											"pm.environment.set(\"taskID\", task[0].id);"
										],
										"type": "text/javascript",
										"id": "933f2918-7ddc-47c2-9e2e-ffc1675fd999"
									}
								}
							],
							"id": "6d9e7062-48cf-4cbd-9368-624bd6482a40",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/tasks",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an info about task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that all values are correct \", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).that.is.a('number');",
											"    pm.expect(jsonData.text).that.is.a('string');",
											"    pm.expect(jsonData.answer).that.is.a('string');",
											"    pm.expect(jsonData.title).that.is.a('string');",
											"});"
										],
										"type": "text/javascript",
										"id": "825ac72c-d585-4b05-a7aa-786a2fb227c4"
									}
								}
							],
							"id": "350a7dcd-358b-4bf3-8e61-6aa5bb91f82f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{taskID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Verify that all values are correct \", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).that.is.a('number');",
											"    pm.expect(jsonData.text).that.is.a('string');",
											"    pm.expect(jsonData.answer).that.is.a('string');",
											"    pm.expect(jsonData.title).that.is.a('string');",
											"});"
										],
										"type": "text/javascript",
										"id": "91b239e0-ab5d-45f5-a08f-10c483c7c44e"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"createdTaskID\", _.random(00000,99999));"
										],
										"type": "text/javascript",
										"id": "f972f6fe-bdda-4f41-b9ac-cce7a0a87309"
									}
								}
							],
							"id": "d2c8a706-a335-4696-b1aa-4a952fb169ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{createdTaskID}},\n  \"text\": \"{{$randomWords}}\",\n  \"answer\": \"{{$randomWords}}\",\n  \"title\": \"{{$randomWords}}\"\n}  \n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Task without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"id": "583aa8c6-8025-4683-98c1-1eeb48f83d86"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "fb73d918-f149-47ec-bff2-52d5729927bd"
									}
								}
							],
							"id": "9d1d958f-2354-4fa6-aded-8548f23df80e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/tasks",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that all values are correct \", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).that.is.a('number');",
											"    pm.expect(jsonData.text).that.is.a('string');",
											"    pm.expect(jsonData.answer).that.is.a('string');",
											"    pm.expect(jsonData.title).that.is.a('string');",
											"});"
										],
										"type": "text/javascript",
										"id": "0c7af84c-b326-4bee-8548-0941c268676f"
									}
								}
							],
							"id": "fe4b8cc1-eba4-47f7-a041-1381de84ece8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{taskID}},\n  \"text\": \"{{$randomWords}}\",\n  \"answer\": \"{{$randomWords}}\",\n  \"title\": \"{{$randomWords}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{taskID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a text of Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", () => {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript",
										"id": "24c3a8c6-0c3b-43eb-9b26-efdcc672a702"
									}
								}
							],
							"id": "c08031d7-24ad-46ed-9623-359b13c5ccd9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{taskID}},\n  \"text\": \"{{$randomWords}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{taskID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Task without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"id": "6b1a36af-24d3-4754-ba75-bbb9b1d0a65a"
									}
								}
							],
							"id": "879d8a73-0210-4e84-979d-aa6e6677a76b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{taskID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a text of task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that all values are correct \", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).that.is.a('number');",
											"    pm.expect(jsonData.text).that.is.a('string');",
											"    pm.expect(jsonData.answer).that.is.a('string');",
											"    pm.expect(jsonData.title).that.is.a('string');",
											"});"
										],
										"type": "text/javascript",
										"id": "fbe78d98-e2e6-46ad-a821-c91af28c61f3"
									}
								}
							],
							"id": "4b11ec06-9712-4a00-8b4b-ab831af3227f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{taskID}},\n  \"text\": \"{{$randomWords}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{taskID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an answer of task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that all values are correct \", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).that.is.a('number');",
											"    pm.expect(jsonData.text).that.is.a('string');",
											"    pm.expect(jsonData.answer).that.is.a('string');",
											"    pm.expect(jsonData.title).that.is.a('string');",
											"});"
										],
										"type": "text/javascript",
										"id": "92dcd572-897d-4a01-9f98-f82d1be5c929"
									}
								}
							],
							"id": "a7d07a75-7720-488f-9bbc-804ce39bf3a1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{taskID}},\n  \"answer\": \"{{$randomWords}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{taskID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a title of task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify that all values are correct \", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).that.is.a('number');",
											"    pm.expect(jsonData.text).that.is.a('string');",
											"    pm.expect(jsonData.answer).that.is.a('string');",
											"    pm.expect(jsonData.title).that.is.a('string');",
											"});"
										],
										"type": "text/javascript",
										"id": "3746cbb4-8159-4129-afe3-7095b5902757"
									}
								}
							],
							"id": "61f8f934-f89a-4e79-b235-cd152f31c2ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{taskID}},\n  \"title\": \"{{$randomWords}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{taskID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a task without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", () => {",
											"    pm.response.to.have.status(415);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "0415481c-b4ed-4770-8369-0d40c1417f5a"
									}
								}
							],
							"id": "f6a4b8cb-0a54-4a2d-a55b-6b4eb17980c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{taskID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"id": "c6edebf1-e0ad-4e29-9035-a044fd274f94"
									}
								}
							],
							"id": "f004a91c-c11e-43d9-861f-099c2c03eca1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/tasks//{{taskID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"",
										"{{taskID}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "d0dd8c6f-f8fe-4ddb-9a30-9b9039551d0c",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{accessToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a60cc1a9-64f1-4f60-8607-5117cc680505"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "73529321-22d9-40bd-a01f-bb6764f16c7d"
							}
						}
					]
				}
			],
			"id": "16405c3b-8e63-4feb-a82a-c438b988ccf5"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "13892283-be26-49f4-aa8f-8ad028afefc4"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "d3c486bd-fc0c-41b5-9c45-c0cfd6a35902"
			}
		}
	],
	"variable": [
		{
			"id": "0bf339da-9d63-4bf4-9eaa-316b3b6cbb39",
			"key": "baseURL",
			"value": "https://sqlverifier-50d286d70656.herokuapp.com",
			"type": "string"
		},
		{
			"id": "87574c76-9d0a-45bc-82b1-5f40c4aa7c70",
			"key": "studentUserName",
			"value": "panel",
			"type": "string"
		},
		{
			"id": "b1b7f339-1abb-4938-abcb-dc26fc775f6d",
			"key": "studentPassword",
			"value": "123456",
			"type": "string"
		},
		{
			"id": "926c491b-a13a-45b3-9960-3a263ad60e81",
			"key": "teacherUserName",
			"value": "card",
			"type": "string"
		},
		{
			"id": "f55b0d7a-62f3-4b9a-8d94-2e3a8b76cc40",
			"key": "teacherPassword",
			"value": "123456",
			"type": "string"
		},
		{
			"id": "98eff104-61f1-4a31-8f1f-d12f281da931",
			"key": "adminUserName",
			"value": "protocol",
			"type": "string"
		},
		{
			"id": "8f4dfad2-e3c8-47ff-8372-1ad874e4d628",
			"key": "adminPassword",
			"value": "123456",
			"type": "string"
		},
		{
			"id": "55d5d147-6785-4e76-8130-25e5fb9a67d6",
			"key": "nonActiveUserName",
			"value": "driver",
			"type": "string"
		},
		{
			"id": "138f82c3-f83a-442f-919e-de51b05de680",
			"key": "nonActivePassword",
			"value": "123456",
			"type": "string"
		},
		{
			"id": "6e244299-a299-44d7-95df-2daccdc91d53",
			"key": "admin",
			"value": "admin",
			"type": "string"
		}
	]
}